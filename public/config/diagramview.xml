<mxEditor defaultGroup="group" defaultEdge="connector">
    <add as="onInit"><![CDATA[
		function ()
		{
			onInit(this);
		}
	]]></add>
    <ui>
        <add as="graph" element="graph"/>
    </ui>
    <Array as="templates">
        <add as="group">
            <Group label="" href="">
                <mxCell vertex="1" style="group" connectable="0"/>
            </Group>
        </add>
        <add as="connector">
            <Connector label="" href="">
                <mxCell edge="1">
                    <mxGeometry as="geometry" relative="1"/>
                </mxCell>
            </Connector>
        </add>
        <add as="container">
            <Container label="Container" href="">
                <mxCell vertex="1" style="swimlane" connectable="0">
                    <mxGeometry as="geometry" width="200" height="200"/>
                </mxCell>
            </Container>
        </add>
        <add as="rectangle">
            <Rect label="Rectangle" href="">
                <mxCell vertex="1">
                    <mxGeometry as="geometry" width="160" height="55"/>
                </mxCell>
            </Rect>
        </add>
        <add as="text">
            <Text label="Text Here" href="">
                <mxCell vertex="1" style="text">
                    <mxGeometry as="geometry" width="80" height="20"/>
                </mxCell>
            </Text>
        </add>
        <add as="image">
            <Image label="" href="">
                <mxCell vertex="1" style="image">
                    <mxGeometry as="geometry" width="80" height="50"/>
                </mxCell>
            </Image>
        </add>
        <add as="rounded">
            <Roundrect label="Rounded" href="">
                <mxCell vertex="1" style="rounded">
                    <mxGeometry as="geometry" width="80" height="40"/>
                </mxCell>
            </Roundrect>
        </add>
        <add as="ellipse">
            <Shape label="" href="">
                <mxCell vertex="1" style="ellipse">
                    <mxGeometry as="geometry" width="50" height="50"/>
                </mxCell>
            </Shape>
        </add>
        <add as="rhombus">
            <Shape label="Rhombus" href="">
                <mxCell vertex="1" style="rhombus">
                    <mxGeometry as="geometry" width="150" height="50"/>
                </mxCell>
            </Shape>
        </add>
        <add as="actor">
            <Shape label="Shape" href="">
                <mxCell vertex="1" style="actor">
                    <mxGeometry as="geometry" width="40" height="60"/>
                </mxCell>
            </Shape>
        </add>
        <add as="cloud">
            <Shape label="Shape" href="">
                <mxCell vertex="1" style="cloud">
                    <mxGeometry as="geometry" width="80" height="60"/>
                </mxCell>
            </Shape>
        </add>
        <add as="hline">
            <Shape label="" href="">
                <mxCell vertex="1" style="ellipse">
                    <mxGeometry as="geometry" width="60" height="10"/>
                </mxCell>
            </Shape>
        </add>
    </Array>
    <mxGraph as="graph" alternateEdgeStyle="verticalConnector" allowLoops="1" dropEnabled="1">
        <add as="isAutoSizeCell"><![CDATA[
			function(cell)
			{
				return mxUtils.isNode(this.model.getValue(cell), 'text');
			}
		]]></add>
        <add as="isSwimlane"><![CDATA[
			function (cell)
			{
				return mxUtils.isNode(this.model.getValue(cell), 'container');
			}
		]]></add>
        <add as="getTooltipForCell"><![CDATA[
			function(cell)
			{
				var label = cell.getAttribute('label');
				var style = cell.getStyle();

				return ((label != null) ? ('<b>' + label +
						'</b> (' + cell.getId() + ')<br>') : '') + (cell.getAttribute('note')!==undefined?cell.getAttribute('note'):'');
			}
		]]></add>
        <add as="convertValueToString"><![CDATA[
			function(cell)
			{
				return cell.getAttribute('label');
			}
		]]></add>
        <include name="/config/stylesheet.xml"/>
        <mxGraphModel as="model">
            <add as="valueForCellChanged"><![CDATA[
				function(cell, value)
				{
					var previous = null;

					if (value == null || isNaN(value.nodeType))
					{
						previous = cell.value.getAttribute('label');

						if (value == null)
						{
							cell.value.removeAttribute('label');
						}
						else
						{
							cell.setAttribute('label', value);
						}
					}
					else
					{
						previous = cell.value;
						cell.value = value;
					}

					return previous;
				}
			]]></add>
            <root>
                <Diagram label="My Diagram" href="http://www.jgraph.com/" id="0">
                    <mxCell/>
                </Diagram>
                <Layer label="Default Layer" id="1">
                    <mxCell parent="0"/>
                </Layer>
            </root>
        </mxGraphModel>
    </mxGraph>
</mxEditor>
